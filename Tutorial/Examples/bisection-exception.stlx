findZero := procedure() {
    try {
        s := read("Please enter a function: ");
        f := evalTerm(parse("x |-> " + s));
        a := read("Enter left  boundary: ");
        b := read("Enter right boundary: ");
        z := bisection(f, a, b);
        print("zero at z = $z$");
    } catch (e) {
        print(e);
        print("Please try again.\n");
        findZero();
    }
};

bisection := procedure(f, a, b) {
    if (a > b) {
        throw("Left boundary a has to be less than right boundary b!");   
    }
    [ fa, fb ] := [ f(a), f(b) ]; 
    if (fa * fb > 0) {
        throw("Function f has to have a sign change in [a, b]!");
    }
    while (b - a >= 10 ** -12) {
        c := 1/2 * (a + b);
        fc := f(c); 
        if ((fa < 0 && fc < 0.0) || (fa >= 0 && fc >= 0)) {
            a := c; fa := fc; 
        } else {
            b := c; fb := fc; 
        }
    }
    return 1/2 * (a + b);
};

findZero();
